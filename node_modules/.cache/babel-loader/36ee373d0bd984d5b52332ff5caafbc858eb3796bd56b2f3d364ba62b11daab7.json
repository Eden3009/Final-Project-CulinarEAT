{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport HomePage from './HomePage';\r\nimport AddRecipePage from './AddRecipePage';\r\nimport ShoppingListPage from './ShoppingListPage';\r\nimport FavoritesPage from './FavoritesPage';\r\nimport ProfilePage from './ProfilePage';\r\nimport LoginPage from './LoginPage';\r\nimport RegistrationPage from './RegistrationPage';\r\nimport ChatbotPage from './ChatbotPage';\r\nimport RecipeDetailPage from './RecipeDetailPage';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport axios from 'axios';\r\n\r\nconst appStyles = {\r\n  app: {\r\n    textAlign: 'center',\r\n  },\r\n  appHeader: {\r\n    backgroundColor: '#282c34',\r\n    minHeight: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    fontSize: 'calc(10px + 2vmin)',\r\n    color: 'white',\r\n  },\r\n  appLink: {\r\n    color: '#61dafb',\r\n  },\r\n  appLogo: {\r\n    height: '40vmin',\r\n    pointerEvents: 'none',\r\n    animation: 'App-logo-spin infinite 20s linear',\r\n  },\r\n};\r\n\r\nconst keyframeStyles = `\r\n  @keyframes App-logo-spin {\r\n    from {\r\n      transform: rotate(0deg);\r\n    }\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\n// Inject keyframes into the document\r\nconst styleSheet = document.createElement('style');\r\nstyleSheet.type = 'text/css';\r\nstyleSheet.innerHTML = keyframeStyles;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  // Check for session status on initial load\r\n  useEffect(() => {\r\n    axios\r\n      .get('http://localhost:5001/session', { withCredentials: true })\r\n      .then((response) => {\r\n        if (response.data.message === 'Session valid') {\r\n          setIsLoggedIn(true);\r\n        } else {\r\n          setIsLoggedIn(false);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setIsLoggedIn(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div style={appStyles.app}>\r\n        <Navbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          {/* Temporarily disable login check for AddRecipePage }\r\n     /*     <Route path=\"/add-recipe\" element={<AddRecipePage />} />\r\n          <Route\r\n            path=\"/shopping-list\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <ShoppingListPage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/favorites\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <FavoritesPage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/profile\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <ProfilePage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/login\"\r\n            element={<LoginPage setIsLoggedIn={setIsLoggedIn} />}\r\n          />\r\n          <Route path=\"/register\" element={<RegistrationPage />} />\r\n          <Route\r\n            path=\"/chatbot\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <ChatbotPage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route path=\"/recipe-detail\" element={<RecipeDetailPage />} />\r\n        </Routes>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;*/","map":{"version":3,"names":[],"sources":["C:/Users/edens/Desktop/Final Project/src/App.jsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport HomePage from './HomePage';\r\nimport AddRecipePage from './AddRecipePage';\r\nimport ShoppingListPage from './ShoppingListPage';\r\nimport FavoritesPage from './FavoritesPage';\r\nimport ProfilePage from './ProfilePage';\r\nimport LoginPage from './LoginPage';\r\nimport RegistrationPage from './RegistrationPage';\r\nimport ChatbotPage from './ChatbotPage';\r\nimport RecipeDetailPage from './RecipeDetailPage';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport axios from 'axios';\r\n\r\nconst appStyles = {\r\n  app: {\r\n    textAlign: 'center',\r\n  },\r\n  appHeader: {\r\n    backgroundColor: '#282c34',\r\n    minHeight: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    fontSize: 'calc(10px + 2vmin)',\r\n    color: 'white',\r\n  },\r\n  appLink: {\r\n    color: '#61dafb',\r\n  },\r\n  appLogo: {\r\n    height: '40vmin',\r\n    pointerEvents: 'none',\r\n    animation: 'App-logo-spin infinite 20s linear',\r\n  },\r\n};\r\n\r\nconst keyframeStyles = `\r\n  @keyframes App-logo-spin {\r\n    from {\r\n      transform: rotate(0deg);\r\n    }\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\n// Inject keyframes into the document\r\nconst styleSheet = document.createElement('style');\r\nstyleSheet.type = 'text/css';\r\nstyleSheet.innerHTML = keyframeStyles;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  // Check for session status on initial load\r\n  useEffect(() => {\r\n    axios\r\n      .get('http://localhost:5001/session', { withCredentials: true })\r\n      .then((response) => {\r\n        if (response.data.message === 'Session valid') {\r\n          setIsLoggedIn(true);\r\n        } else {\r\n          setIsLoggedIn(false);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setIsLoggedIn(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div style={appStyles.app}>\r\n        <Navbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          {/* Temporarily disable login check for AddRecipePage }\r\n     /*     <Route path=\"/add-recipe\" element={<AddRecipePage />} />\r\n          <Route\r\n            path=\"/shopping-list\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <ShoppingListPage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/favorites\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <FavoritesPage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/profile\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <ProfilePage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/login\"\r\n            element={<LoginPage setIsLoggedIn={setIsLoggedIn} />}\r\n          />\r\n          <Route path=\"/register\" element={<RegistrationPage />} />\r\n          <Route\r\n            path=\"/chatbot\"\r\n            element={\r\n              isLoggedIn ? (\r\n                <ChatbotPage />\r\n              ) : (\r\n                <LoginPage setIsLoggedIn={setIsLoggedIn} />\r\n              )\r\n            }\r\n          />\r\n          <Route path=\"/recipe-detail\" element={<RecipeDetailPage />} />\r\n        </Routes>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;*/\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}